##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /       

module Twilio
  module REST
    class Conversations < Domain
      class V1 < Version
        class ConversationList < ListResource
          class CompletedList < ListResource
            ##
            # Initialize the CompletedList
            # @param [Version] version Version that contains the resource
            
            # @return [CompletedList] CompletedList
            def initialize(version)
              super(version)
              
              # Path Solution
              @solution = {}
              @uri = "/Conversations/Completed"
            end
            
            ##
            # Lists CompletedInstance records from the API as a list.
            # Unlike stream(), this operation is eager and will load `limit` records into
            # memory before returning.
            # @param [Integer] limit Upper limit for the number of records to return. stream()
            #                   guarantees to never return more than limit.  Default is no limit
            # @param [Integer] page_size Number of records to fetch per request, when not set will                      use
            #  the default value of 50 records.  If no page_size is                      defined
            #  but a limit is defined, stream() will attempt to read                      the
            #  limit with the most efficient page size,                      i.e. min(limit, 1000)
            
            # @return [Array] Array of up to limit results
            def list(limit: nil, page_size: nil)
              self.stream(
                  limit: limit,
                  page_size: page_size
              ).entries
            end
            
            ##
            # Streams CompletedInstance records from the API as an Enumerable.
            # This operation lazily loads records as efficiently as possible until the limit
            # is reached.
            # @param [Integer] limit Upper limit for the number of records to return.                  stream()
            #  guarantees to never return more than limit.                  Default is no limit
            # @param [Integer] page_size Number of records to fetch per request, when                      not set will use
            #  the default value of 50 records.                      If no page_size is defined
            #                       but a limit is defined, stream() will attempt to                      read the
            #  limit with the most efficient page size,                       i.e. min(limit, 1000)
            
            # @return [Enumerable] Enumerable that will yield up to limit results
            def stream(limit: nil, page_size: nil)
              limits = @version.read_limits(limit, page_size)
              
              page = self.page(
                  page_size: limits['page_size'],
              )
              
              @version.stream(page, limit: limits['limit'], page_limit: limits['page_limit'])
            end
            
            ##
            # When passed a block, yields CompletedInstance records from the API.
            # This operation lazily loads records as efficiently as possible until the limit
            # is reached.
            # @param [Integer] limit Upper limit for the number of records to return.                  stream()
            #  guarantees to never return more than limit.                  Default is no limit
            # @param [Integer] page_size Number of records to fetch per request, when                       not set will use
            #  the default value of 50 records.                      If no page_size is defined
            #                       but a limit is defined, stream() will attempt to read the
            #                       limit with the most efficient page size, i.e. min(limit, 1000)
            def each
              limits = @version.read_limits
              
              page = self.page(
                  page_size: limits['page_size'],
              )
              
              @version.stream(page,
                              limit: limits['limit'],
                              page_limit: limits['page_limit']).each {|x| yield x}
            end
            
            ##
            # Retrieve a single page of CompletedInstance records from the API.
            # Request is executed immediately.
            # @param [String] page_token PageToken provided by the API
            # @param [Integer] page_number Page Number, this value is simply for client state
            # @param [Integer] page_size Number of records to return, defaults to 50
            
            # @return [Page] Page of CompletedInstance
            def page(page_token: nil, page_number: nil, page_size: nil)
              params = {
                  'PageToken' => page_token,
                  'Page' => page_number,
                  'PageSize' => page_size,
              }
              response = @version.page(
                  'GET',
                  @uri,
                  params
              )
              return CompletedPage.new(@version, response, @solution)
            end
            
            ##
            # Provide a user friendly representation
            def to_s
              '#<Twilio.Conversations.V1.CompletedList>'
            end
          end
        
          class CompletedPage < Page
            ##
            # Initialize the CompletedPage
            # @param [Version] version Version that contains the resource
            # @param [Response] response Response from the API
            # @param [Hash] solution Path solution for the resource
            
            # @return [CompletedPage] CompletedPage
            def initialize(version, response, solution)
              super(version, response)
              
              # Path Solution
              @solution = solution
            end
            
            ##
            # Build an instance of CompletedInstance
            # @param [Hash] payload Payload response from the API
            
            # @return [CompletedInstance] CompletedInstance
            def get_instance(payload)
              return CompletedInstance.new(
                  @version,
                  payload,
              )
            end
            
            ##
            # Provide a user friendly representation
            def to_s
              '<Twilio.Conversations.V1.CompletedPage>'
            end
          end
        
          class CompletedInstance < InstanceResource
            ##
            # Initialize the CompletedInstance
            # @param [Version] version Version that contains the resource
            # @param [Hash] payload payload that contains response from Twilio
            
            # @return [CompletedInstance] CompletedInstance
            def initialize(version, payload)
              super(version)
              
              # Marshaled Properties
              @properties = {
                  'sid' => payload['sid'],
                  'status' => payload['status'],
                  'duration' => payload['duration'].to_i,
                  'date_created' => Twilio.deserialize_iso8601(payload['date_created']),
                  'start_time' => Twilio.deserialize_iso8601(payload['start_time']),
                  'end_time' => Twilio.deserialize_iso8601(payload['end_time']),
                  'account_sid' => payload['account_sid'],
                  'url' => payload['url'],
              }
            end
            
            def sid
              @properties['sid']
            end
            
            def status
              @properties['status']
            end
            
            def duration
              @properties['duration']
            end
            
            def date_created
              @properties['date_created']
            end
            
            def start_time
              @properties['start_time']
            end
            
            def end_time
              @properties['end_time']
            end
            
            def account_sid
              @properties['account_sid']
            end
            
            def url
              @properties['url']
            end
            
            ##
            # Access the participants
            # @return [participants] participants
            def participants
              @context.participants
            end
            
            ##
            # Provide a user friendly representation
            def to_s
              "<Twilio.Conversations.V1.CompletedInstance>"
            end
          end
        end
      end
    end
  end
end