##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /       

module Twilio
  module REST
    class EventList < ListResource
      ##
      # Initialize the EventList
      def initialize(version, workspace_sid)
        super(version)
        
        # Path Solution
        @solution = {
            'workspace_sid' => workspace_sid
        }
        @uri = "/Workspaces/#{@solution[:workspace_sid]}/Events"
      end
      
      ##
      # Reads EventInstance records from the API as a list.
      def read(end_date: nil, event_type: nil, minutes: nil, reservation_sid: nil, start_date: nil, task_queue_sid: nil, task_sid: nil, worker_sid: nil, workflow_sid: nil, limit: nil, page_size: nil)
        @version.read(
            event_type: nil,
            minutes: nil,
            reservation_sid: nil,
            start_date: nil,
            task_queue_sid: nil,
            task_sid: nil,
            worker_sid: nil,
            workflow_sid: nil,
            limit: nil,
            page_size: nil
        )
      end
      
      ##
      # Retrieve a single page of EventInstance records from the API.
      def page(end_date: nil, event_type: nil, minutes: nil, reservation_sid: nil, start_date: nil, task_queue_sid: nil, task_sid: nil, worker_sid: nil, workflow_sid: nil, page_token: nil, page_number: nil, page_size: nil)
        params = {
            'EndDate' => serialize.iso8601_datetime(end_date),
            'EventType' => event_type,
            'Minutes' => minutes,
            'ReservationSid' => reservation_sid,
            'StartDate' => serialize.iso8601_datetime(start_date),
            'TaskQueueSid' => task_queue_sid,
            'TaskSid' => task_sid,
            'WorkerSid' => worker_sid,
            'WorkflowSid' => workflow_sid,
            'PageToken' => page_token,
            'Page' => page_number,
            'PageSize' => page_size,
        }
        @version.page(
            self,
            EventInstance,
            @solution,
            'GET',
            @uri,
            params
        )
      end
      
      ##
      # Constructs a EventContext
      def get(sid)
        EventContext.new(@version, sid, @solution)
      end
      
      ##
      # Provide a user friendly representation
      def to_s
        '#<Twilio.Taskrouter.V1.EventList>'
      end
    end
  
    class EventContext < InstanceContext
      def initialize(version, workspace_sid, sid)
        super(version)
        
        # Path Solution
        @solution = {
            'workspace_sid' => workspace_sid,
            'sid' => sid,
        }
        @uri = "/Workspaces/#{@solution[:workspace_sid]}/Events/#{@solution[:sid]}"
      end
      
      ##
      # Fetch a EventInstance
      def fetch
        params = {}
        
        @version.fetch(
            EventInstance,
            @solution,
            'GET',
            @uri,
            params,
        )
      end
      
      ##
      # Provide a user friendly representation
      def to_s
        context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
        "#<Twilio.Taskrouter.V1.EventContext #{context}>"
      end
    end
  
    class EventInstance < InstanceResource
      def initialize(version, payload, workspace_sid, sid: nil)
        super(version)
        
        # Marshaled Properties
        @properties = {
            'account_sid' => payload['account_sid'],
            'actor_sid' => payload['actor_sid'],
            'actor_type' => payload['actor_type'],
            'actor_url' => payload['actor_url'],
            'description' => payload['description'],
            'event_data' => payload['event_data'],
            'event_date' => deserialize.iso8601_datetime(payload['event_date']),
            'event_type' => payload['event_type'],
            'resource_sid' => payload['resource_sid'],
            'resource_type' => payload['resource_type'],
            'resource_url' => payload['resource_url'],
            'sid' => payload['sid'],
            'source' => payload['source'],
            'source_ip_address' => payload['source_ip_address'],
            'url' => payload['url'],
        }
        
        # Context
        @instance_context = nil
        @params = {
            'workspace_sid' => workspace_sid,
            'sid' => sid || @properties['sid'],
        }
      end
      
      def _context
        unless @instance_context
          @instance_context = EventContext(
              @version,
              @params['workspace_sid'],
              @params['sid'],
          )
        end
        @instance_context
      end
      
      def account_sid
        @properties['account_sid']
      end
      
      def actor_sid
        @properties['actor_sid']
      end
      
      def actor_type
        @properties['actor_type']
      end
      
      def actor_url
        @properties['actor_url']
      end
      
      def description
        @properties['description']
      end
      
      def event_data
        @properties['event_data']
      end
      
      def event_date
        @properties['event_date']
      end
      
      def event_type
        @properties['event_type']
      end
      
      def resource_sid
        @properties['resource_sid']
      end
      
      def resource_type
        @properties['resource_type']
      end
      
      def resource_url
        @properties['resource_url']
      end
      
      def sid
        @properties['sid']
      end
      
      def source
        @properties['source']
      end
      
      def source_ip_address
        @properties['source_ip_address']
      end
      
      def url
        @properties['url']
      end
      
      ##
      # Fetch a EventInstance
      def fetch
        @context.fetch()
      end
      
      ##
      # Provide a user friendly representation
      def to_s
        context = @params.map{|k, v| "#{k}: #{v}"}.join(" ")
        "<Twilio.Taskrouter.V1.EventInstance #{context}>"
      end
    end
  end
end