##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /       

module Twilio
  module REST
    class TaskList < ListResource
      ##
      # Initialize the TaskList
      def initialize(version, workspace_sid)
        super
        
        # Path Solution
        @solution = {
            workspace_sid: workspace_sid
        }
        @uri = "/Workspaces/#{@solution[:workspace_sid]}/Tasks"
      end
      
      ##
      # Reads TaskInstance records from the API as a list.
      def read(self, priority=values.unset, assignment_status=values.unset, workflow_sid=values.unset, workflow_name=values.unset, task_queue_sid=values.unset, task_queue_name=values.unset, limit=nil, page_size=nil)
        @version.read(
            priority,
            assignment_status,
            workflow_sid,
            workflow_name,
            task_queue_sid,
            task_queue_name,
            limit,
            page_size
        ))
      end
      
      ##
      # Retrieve a single page of TaskInstance records from the API.
      def page(self, priority=values.unset, assignment_status=values.unset, workflow_sid=values.unset, workflow_name=values.unset, task_queue_sid=values.unset, task_queue_name=values.unset, page_token=None, page_number=None, page_size=None)
        params = values.of({
            Priority: priority,
            AssignmentStatus: assignment_status,
            WorkflowSid: workflow_sid,
            WorkflowName: workflow_name,
            TaskQueueSid: task_queue_sid,
            TaskQueueName: task_queue_name,
            PageToken: page_token,
            Page: page_number,
            PageSize: page_size,
        })
        @version.page(
            self,
            TaskInstance,
            @solution,
            'GET',
            @uri,
            params
        )
      end
      
      ##
      # Create a new TaskInstance
      def create(self, attributes, workflow_sid, timeout=values.unset, priority=values.unset)
        data = values.of({
            Attributes: attributes,
            WorkflowSid: workflow_sid,
            Timeout: timeout,
            Priority: priority,
        })
        
        @version.create(
            TaskInstance,
            @solution,
            'POST',
            @uri,
            {}
            data
        )
      end
      
      ##
      # Constructs a TaskContext
      def get(sid)
        TaskContext.new(@version, sid, @solution)
      end
      
      ##
      # Provide a user friendly representation
      def to_s
        '#<Twilio.Taskrouter.V1.TaskList>'
      end
    end
  end
end