##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /       

module Twilio
  module REST
    class WorkerList < ListResource
      ##
      # Initialize the WorkerList
      def initialize(version, workspace_sid)
        super
        
        # Path Solution
        @solution = {
            workspace_sid: workspace_sid
        }
        @uri = "/Workspaces/#{@solution[:workspace_sid]}/Workers"
        
        # Components
        @statistics = None
      end
      
      ##
      # Reads WorkerInstance records from the API as a list.
      def read(self, activity_name=values.unset, activity_sid=values.unset, available=values.unset, friendly_name=values.unset, target_workers_expression=values.unset, task_queue_name=values.unset, task_queue_sid=values.unset, limit=nil, page_size=nil)
        @version.read(
            activity_name,
            activity_sid,
            available,
            friendly_name,
            target_workers_expression,
            task_queue_name,
            task_queue_sid,
            limit,
            page_size
        ))
      end
      
      ##
      # Retrieve a single page of WorkerInstance records from the API.
      def page(self, activity_name=values.unset, activity_sid=values.unset, available=values.unset, friendly_name=values.unset, target_workers_expression=values.unset, task_queue_name=values.unset, task_queue_sid=values.unset, page_token=None, page_number=None, page_size=None)
        params = values.of({
            ActivityName: activity_name,
            ActivitySid: activity_sid,
            Available: available,
            FriendlyName: friendly_name,
            TargetWorkersExpression: target_workers_expression,
            TaskQueueName: task_queue_name,
            TaskQueueSid: task_queue_sid,
            PageToken: page_token,
            Page: page_number,
            PageSize: page_size,
        })
        @version.page(
            self,
            WorkerInstance,
            @solution,
            'GET',
            @uri,
            params
        )
      end
      
      ##
      # Create a new WorkerInstance
      def create(self, friendly_name, activity_sid=values.unset, attributes=values.unset)
        data = values.of({
            FriendlyName: friendly_name,
            ActivitySid: activity_sid,
            Attributes: attributes,
        })
        
        @version.create(
            WorkerInstance,
            @solution,
            'POST',
            @uri,
            {}
            data
        )
      end
      
      ##
      # Access the statistics
      def statistics
        @statistics ||= WorkersStatisticsList(@version, @solution)
      end
      
      ##
      # Constructs a WorkerContext
      def get(sid)
        WorkerContext.new(@version, sid, @solution)
      end
      
      ##
      # Provide a user friendly representation
      def to_s
        '#<Twilio.Taskrouter.V1.WorkerList>'
      end
    end
  end
end