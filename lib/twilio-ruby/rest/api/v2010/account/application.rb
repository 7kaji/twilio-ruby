##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /       

module Twilio
  module REST
    class Api < Domain
      class V2010 < Version
        class AccountContext < InstanceContext
          class ApplicationList < ListResource
            ##
            # Initialize the ApplicationList
            def initialize(version, account_sid: nil)
              super(version)
              
              # Path Solution
              @solution = {
                  account_sid: account_sid
              }
              @uri = "/Accounts/#{@solution[:account_sid]}/Applications.json"
            end
            
            ##
            # Create a new ApplicationInstance
            def create(friendly_name: nil, api_version: nil, voice_url: nil, voice_method: nil, voice_fallback_url: nil, voice_fallback_method: nil, status_callback: nil, status_callback_method: nil, voice_caller_id_lookup: nil, sms_url: nil, sms_method: nil, sms_fallback_url: nil, sms_fallback_method: nil, sms_status_callback: nil, message_status_callback: nil)
              data = {
                  'FriendlyName' => friendly_name,
                  'ApiVersion' => api_version,
                  'VoiceUrl' => voice_url,
                  'VoiceMethod' => voice_method,
                  'VoiceFallbackUrl' => voice_fallback_url,
                  'VoiceFallbackMethod' => voice_fallback_method,
                  'StatusCallback' => status_callback,
                  'StatusCallbackMethod' => status_callback_method,
                  'VoiceCallerIdLookup' => voice_caller_id_lookup,
                  'SmsUrl' => sms_url,
                  'SmsMethod' => sms_method,
                  'SmsFallbackUrl' => sms_fallback_url,
                  'SmsFallbackMethod' => sms_fallback_method,
                  'SmsStatusCallback' => sms_status_callback,
                  'MessageStatusCallback' => message_status_callback,
              }
              
              payload = @version.create(
                  'POST',
                  @uri,
                  data: data
              )
              
              return ApplicationInstance.new(
                  @version,
                  payload,
                  account_sid: @solution['account_sid'],
              )
            end
            
            ##
            # Reads ApplicationInstance records from the API as a list.
            def list(friendly_name: nil, limit: nil, page_size: nil)
              self.stream(
                  friendly_name: friendly_name,
                  limit: limit,
                  page_size: page_size
              ).entries
            end
            
            def stream(friendly_name: nil, limit: nil, page_size: nil)
              limits = @version.read_limits(limit, page_size)
              
              page = self.page(
                  friendly_name: friendly_name,
                  page_size: limits['page_size'],
              )
              
              @version.stream(page, limit: limits['limit'], page_limit: limits['page_limit'])
            end
            
            def each
              limits = @version.read_limits
              
              page = self.page(
                  page_size: limits['page_size'],
              )
              
              @version.stream(page,
                              limit: limits['limit'],
                              page_limit: limits['page_limit']).each {|x| yield x}
            end
            
            ##
            # Retrieve a single page of ApplicationInstance records from the API.
            def page(friendly_name: nil, page_token: nil, page_number: nil, page_size: nil)
              params = {
                  'FriendlyName' => friendly_name,
                  'PageToken' => page_token,
                  'Page' => page_number,
                  'PageSize' => page_size,
              }
              response = @version.page(
                  'GET',
                  @uri,
                  params
              )
              return ApplicationPage.new(
                  @version,
                  response,
                  account_sid: @solution['account_sid'],
              )
            end
            
            ##
            # Constructs a ApplicationContext
            def get(sid)
              ApplicationContext.new(
                  @version,
                  account_sid: @solution[:account_sid],
                  sid: sid,
              )
            end
            
            ##
            # Provide a user friendly representation
            def to_s
              '#<Twilio.Api.V2010.ApplicationList>'
            end
          end
        
          class ApplicationPage < Page
            def initialize(version, response, account_sid: nil)
              super(version, response)
              
              # Path Solution
              @solution = {
                  'account_sid' => account_sid,
              }
            end
            
            def get_instance(payload)
              return ApplicationInstance.new(
                  @version,
                  payload,
                  account_sid: @solution['account_sid'],
              )
            end
            
            ##
            # Provide a user friendly representation
            def to_s
              '<Twilio.Api.V2010.ApplicationPage>'
            end
          end
        
          class ApplicationContext < InstanceContext
            def initialize(version, account_sid, sid)
              super(version)
              
              # Path Solution
              @solution = {
                  account_sid: account_sid,
                  sid: sid,
              }
              @uri = "/Accounts/#{@solution[:account_sid]}/Applications/#{@solution[:sid]}.json"
            end
            
            ##
            # Deletes the ApplicationInstance
            def delete
              return @version.delete('delete', @uri)
            end
            
            ##
            # Fetch a ApplicationInstance
            def fetch
              params = {}
              
              payload = @version.fetch(
                  'GET',
                  @uri,
                  params,
              )
              
              return ApplicationInstance.new(
                  @version,
                  payload,
                  account_sid: @solution['account_sid'],
                  sid: @solution['sid'],
              )
            end
            
            ##
            # Update the ApplicationInstance
            def update(friendly_name: nil, api_version: nil, voice_url: nil, voice_method: nil, voice_fallback_url: nil, voice_fallback_method: nil, status_callback: nil, status_callback_method: nil, voice_caller_id_lookup: nil, sms_url: nil, sms_method: nil, sms_fallback_url: nil, sms_fallback_method: nil, sms_status_callback: nil, message_status_callback: nil)
              data = {
                  'FriendlyName' => friendly_name,
                  'ApiVersion' => api_version,
                  'VoiceUrl' => voice_url,
                  'VoiceMethod' => voice_method,
                  'VoiceFallbackUrl' => voice_fallback_url,
                  'VoiceFallbackMethod' => voice_fallback_method,
                  'StatusCallback' => status_callback,
                  'StatusCallbackMethod' => status_callback_method,
                  'VoiceCallerIdLookup' => voice_caller_id_lookup,
                  'SmsUrl' => sms_url,
                  'SmsMethod' => sms_method,
                  'SmsFallbackUrl' => sms_fallback_url,
                  'SmsFallbackMethod' => sms_fallback_method,
                  'SmsStatusCallback' => sms_status_callback,
                  'MessageStatusCallback' => message_status_callback,
              }
              
              payload = @version.update(
                  'POST',
                  @uri,
                  data=data,
              )
              
              return ApplicationInstance.new(
                  @version,
                  payload,
                  account_sid: @solution['account_sid'],
                  sid: @solution['sid'],
              )
            end
            
            ##
            # Provide a user friendly representation
            def to_s
              context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
              "#<Twilio.Api.V2010.ApplicationContext #{context}>"
            end
          end
        
          class ApplicationInstance < InstanceResource
            def initialize(version, payload, account_sid: nil, sid: nil)
              super(version)
              
              # Marshaled Properties
              @properties = {
                  'account_sid' => payload['account_sid'],
                  'api_version' => payload['api_version'],
                  'date_created' => Twilio.deserialize_rfc2822(payload['date_created']),
                  'date_updated' => Twilio.deserialize_rfc2822(payload['date_updated']),
                  'friendly_name' => payload['friendly_name'],
                  'message_status_callback' => payload['message_status_callback'],
                  'sid' => payload['sid'],
                  'sms_fallback_method' => payload['sms_fallback_method'],
                  'sms_fallback_url' => payload['sms_fallback_url'],
                  'sms_method' => payload['sms_method'],
                  'sms_status_callback' => payload['sms_status_callback'],
                  'sms_url' => payload['sms_url'],
                  'status_callback' => payload['status_callback'],
                  'status_callback_method' => payload['status_callback_method'],
                  'uri' => payload['uri'],
                  'voice_caller_id_lookup' => payload['voice_caller_id_lookup'],
                  'voice_fallback_method' => payload['voice_fallback_method'],
                  'voice_fallback_url' => payload['voice_fallback_url'],
                  'voice_method' => payload['voice_method'],
                  'voice_url' => payload['voice_url'],
              }
              
              # Context
              @instance_context = nil
              @params = {
                  'account_sid' => account_sid,
                  'sid' => sid || @properties['sid'],
              }
            end
            
            def context
              unless @instance_context
                @instance_context = ApplicationContext.new(
                    @version,
                    @params['account_sid'],
                    @params['sid'],
                )
              end
              @instance_context
            end
            
            def account_sid
              @properties['account_sid']
            end
            
            def api_version
              @properties['api_version']
            end
            
            def date_created
              @properties['date_created']
            end
            
            def date_updated
              @properties['date_updated']
            end
            
            def friendly_name
              @properties['friendly_name']
            end
            
            def message_status_callback
              @properties['message_status_callback']
            end
            
            def sid
              @properties['sid']
            end
            
            def sms_fallback_method
              @properties['sms_fallback_method']
            end
            
            def sms_fallback_url
              @properties['sms_fallback_url']
            end
            
            def sms_method
              @properties['sms_method']
            end
            
            def sms_status_callback
              @properties['sms_status_callback']
            end
            
            def sms_url
              @properties['sms_url']
            end
            
            def status_callback
              @properties['status_callback']
            end
            
            def status_callback_method
              @properties['status_callback_method']
            end
            
            def uri
              @properties['uri']
            end
            
            def voice_caller_id_lookup
              @properties['voice_caller_id_lookup']
            end
            
            def voice_fallback_method
              @properties['voice_fallback_method']
            end
            
            def voice_fallback_url
              @properties['voice_fallback_url']
            end
            
            def voice_method
              @properties['voice_method']
            end
            
            def voice_url
              @properties['voice_url']
            end
            
            ##
            # Deletes the ApplicationInstance
            def delete
              @context.delete()
            end
            
            ##
            # Fetch a ApplicationInstance
            def fetch
              @context.fetch()
            end
            
            ##
            # Update the ApplicationInstance
            def update(friendly_name: nil, api_version: nil, voice_url: nil, voice_method: nil, voice_fallback_url: nil, voice_fallback_method: nil, status_callback: nil, status_callback_method: nil, voice_caller_id_lookup: nil, sms_url: nil, sms_method: nil, sms_fallback_url: nil, sms_fallback_method: nil, sms_status_callback: nil, message_status_callback: nil)
              @context.update(
                  api_version: nil,
                  voice_url: nil,
                  voice_method: nil,
                  voice_fallback_url: nil,
                  voice_fallback_method: nil,
                  status_callback: nil,
                  status_callback_method: nil,
                  voice_caller_id_lookup: nil,
                  sms_url: nil,
                  sms_method: nil,
                  sms_fallback_url: nil,
                  sms_fallback_method: nil,
                  sms_status_callback: nil,
                  message_status_callback: nil,
              )
            end
            
            ##
            # Provide a user friendly representation
            def to_s
              context = @params.map{|k, v| "#{k}: #{v}"}.join(" ")
              "<Twilio.Api.V2010.ApplicationInstance #{context}>"
            end
          end
        end
      end
    end
  end
end