##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /       

module Twilio
  module REST
    class Api < Domain
      class V2010 < Version
        class AccountContext < InstanceContext
          class ConferenceList < ListResource
            ##
            # Initialize the ConferenceList
            def initialize(version, account_sid: nil)
              super(version)
              
              # Path Solution
              @solution = {
                  account_sid: account_sid
              }
              @uri = "/Accounts/#{@solution[:account_sid]}/Conferences.json"
            end
            
            ##
            # Reads ConferenceInstance records from the API as a list.
            def list(date_created_before: nil, date_created: nil, date_created_after: nil, date_updated_before: nil, date_updated: nil, date_updated_after: nil, friendly_name: nil, status: nil, limit: nil, page_size: nil)
              self.stream(
                  date_created_before: date_created_before,
                  date_created: date_created,
                  date_created_after: date_created_after,
                  date_updated_before: date_updated_before,
                  date_updated: date_updated,
                  date_updated_after: date_updated_after,
                  friendly_name: friendly_name,
                  status: status,
                  limit: limit,
                  page_size: page_size
              ).entries
            end
            
            def stream(date_created_before: nil, date_created: nil, date_created_after: nil, date_updated_before: nil, date_updated: nil, date_updated_after: nil, friendly_name: nil, status: nil, limit: nil, page_size: nil)
              limits = @version.read_limits(limit, page_size)
              
              page = self.page(
                  date_created_before: date_created_before,
                  date_created: date_created,
                  date_created_after: date_created_after,
                  date_updated_before: date_updated_before,
                  date_updated: date_updated,
                  date_updated_after: date_updated_after,
                  friendly_name: friendly_name,
                  status: status,
                  page_size: limits['page_size'],
              )
              
              @version.stream(page, limit: limits['limit'], page_limit: limits['page_limit'])
            end
            
            def each
              limits = @version.read_limits
              
              page = self.page(
                  page_size: limits['page_size'],
              )
              
              @version.stream(page,
                              limit: limits['limit'],
                              page_limit: limits['page_limit']).each {|x| yield x}
            end
            
            ##
            # Retrieve a single page of ConferenceInstance records from the API.
            def page(date_created_before: nil, date_created: nil, date_created_after: nil, date_updated_before: nil, date_updated: nil, date_updated_after: nil, friendly_name: nil, status: nil, page_token: nil, page_number: nil, page_size: nil)
              params = {
                  'DateCreated<' => Twilio.serialize_iso8601(date_created_before),
                  'DateCreated' => Twilio.serialize_iso8601(date_created),
                  'DateCreated>' => Twilio.serialize_iso8601(date_created_after),
                  'DateUpdated<' => Twilio.serialize_iso8601(date_updated_before),
                  'DateUpdated' => Twilio.serialize_iso8601(date_updated),
                  'DateUpdated>' => Twilio.serialize_iso8601(date_updated_after),
                  'FriendlyName' => friendly_name,
                  'Status' => status,
                  'PageToken' => page_token,
                  'Page' => page_number,
                  'PageSize' => page_size,
              }
              response = @version.page(
                  'GET',
                  @uri,
                  params
              )
              return ConferencePage.new(
                  @version,
                  response,
                  account_sid: @solution['account_sid'],
              )
            end
            
            ##
            # Constructs a ConferenceContext
            def get(sid)
              ConferenceContext.new(
                  @version,
                  account_sid: @solution[:account_sid],
                  sid: sid,
              )
            end
            
            ##
            # Provide a user friendly representation
            def to_s
              '#<Twilio.Api.V2010.ConferenceList>'
            end
          end
        
          class ConferencePage < Page
            def initialize(version, response, account_sid: nil)
              super(version, response)
              
              # Path Solution
              @solution = {
                  'account_sid' => account_sid,
              }
            end
            
            def get_instance(payload)
              return ConferenceInstance.new(
                  @version,
                  payload,
                  account_sid: @solution['account_sid'],
              )
            end
            
            ##
            # Provide a user friendly representation
            def to_s
              '<Twilio.Api.V2010.ConferencePage>'
            end
          end
        
          class ConferenceContext < InstanceContext
            def initialize(version, account_sid, sid)
              super(version)
              
              # Path Solution
              @solution = {
                  account_sid: account_sid,
                  sid: sid,
              }
              @uri = "/Accounts/#{@solution[:account_sid]}/Conferences/#{@solution[:sid]}.json"
              
              # Dependents
              @participants = nil
            end
            
            ##
            # Fetch a ConferenceInstance
            def fetch
              params = {}
              
              payload = @version.fetch(
                  'GET',
                  @uri,
                  params,
              )
              
              return ConferenceInstance.new(
                  @version,
                  payload,
                  account_sid: @solution['account_sid'],
                  sid: @solution['sid'],
              )
            end
            
            def participants(call_sid=:unset)
              if call_sid != :unset
                return ParticipantContext.new(
                    @version,
                    @solution[:account_sid],
                    @solution[:sid],
                    call_sid,
                )
              end
              
              unless @participants
                @participants = ParticipantList.new(
                    @version,
                    account_sid: @solution[:account_sid],
                    conference_sid: @solution[:sid],
                )
              end
              
              @participants
            end
            
            ##
            # Provide a user friendly representation
            def to_s
              context = @solution.map {|k, v| "#{k}: #{v}"}.join(',')
              "#<Twilio.Api.V2010.ConferenceContext #{context}>"
            end
          end
        
          class ConferenceInstance < InstanceResource
            def initialize(version, payload, account_sid: nil, sid: nil)
              super(version)
              
              # Marshaled Properties
              @properties = {
                  'account_sid' => payload['account_sid'],
                  'date_created' => Twilio.deserialize_rfc2822(payload['date_created']),
                  'date_updated' => Twilio.deserialize_rfc2822(payload['date_updated']),
                  'api_version' => payload['api_version'],
                  'friendly_name' => payload['friendly_name'],
                  'sid' => payload['sid'],
                  'status' => payload['status'],
                  'uri' => payload['uri'],
              }
              
              # Context
              @instance_context = nil
              @params = {
                  'account_sid' => account_sid,
                  'sid' => sid || @properties['sid'],
              }
            end
            
            def context
              unless @instance_context
                @instance_context = ConferenceContext.new(
                    @version,
                    @params['account_sid'],
                    @params['sid'],
                )
              end
              @instance_context
            end
            
            def account_sid
              @properties['account_sid']
            end
            
            def date_created
              @properties['date_created']
            end
            
            def date_updated
              @properties['date_updated']
            end
            
            def api_version
              @properties['api_version']
            end
            
            def friendly_name
              @properties['friendly_name']
            end
            
            def sid
              @properties['sid']
            end
            
            def status
              @properties['status']
            end
            
            def uri
              @properties['uri']
            end
            
            ##
            # Fetch a ConferenceInstance
            def fetch
              @context.fetch()
            end
            
            def participants
              @context.participants
            end
            
            ##
            # Provide a user friendly representation
            def to_s
              context = @params.map{|k, v| "#{k}: #{v}"}.join(" ")
              "<Twilio.Api.V2010.ConferenceInstance #{context}>"
            end
          end
        end
      end
    end
  end
end